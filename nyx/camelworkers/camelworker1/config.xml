<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd" 
    xmlns:ns2="null" 
    xmlns:ns3="null">    <!-- the camel context -->

    <camelContext id="camel" 
        xmlns="http://camel.apache.org/schema/spring">
        <jmxAgent id="agent" createConnector="true" registryPort="1499"/>

        <dataFormats>
            <xmljson id="xmljson"/>
        </dataFormats>



        <!--Generate Module Info -->
        <route>
            <from uri="timer://lifesign?period=5000"/>
            <setBody>
                <constant>{"error": "OK", "type": "lifesign", "module": "CamelWorker1", "version": "v1.3.0", "alive": 1, "eventtype": "lifesign"}</constant>
            </setBody>
            <!--to uri="log:COUCOU?level=Error"/-->
            <to uri="jms:topic:NYX_MODULE_INFO"/>
        </route>



        <!--Generate Machine Stats -->
        <route>
            <from uri="timer://lifesign?period=60000"/>
            <setHeader headerName="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>
            <to uri="http4://esnodebal:9200/_cat/nodes?format=json&amp;pretty"/>
            <convertBodyTo type="java.lang.String"/>
            <!--to uri="log:stats"/-->
            <to uri="bean:jsHelper"/>
            <setBody>
                <javaScript>
                    var helper = request.headers.get('jsHelper');

                    var doc=JSON.parse(request.body)
                    var curtime = new org.joda.time.DateTime();	                    
                    var result="";
                    

                    for (var i=0;i &lt; doc.length;i++)
                    {   
                        var action={} action.index={}
                        action.index._index = "nyx_infra_load-" + helper.printDate(curtime,'yyyy.MM')
                        action.index._type  = "_doc"
                        result+=JSON.stringify(action)+"\r\n"
                        doc[i]['@timestamp'] = curtime.getMillis()
                        result+=JSON.stringify(doc[i])+"\r\n"

                    }
                    result
                </javaScript>
            </setBody>
            <setHeader headerName="indice">
                <constant>nyx_infra_load</constant>
            </setHeader>
            <to uri="direct:insertinelk"/>
        </route>

        <!--Generate Disk Stats -->
        <route>
            <from uri="timer://lifesign?period=600000"/>
            <setHeader headerName="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>
            <to uri="http4://esnodebal:9200/_cat/allocation?format=json&amp;pretty"/>
            <convertBodyTo type="java.lang.String"/>
            <!--to uri="log:disks"/-->
            <to uri="bean:jsHelper"/>
            <setBody>
                <javaScript>
                    var helper = request.headers.get('jsHelper');

                    var doc=JSON.parse(request.body)
                    var curtime = new org.joda.time.DateTime();	                    
                    var result="";
                    

                    for (var i=0;i &lt; doc.length;i++)
                    {   
                        var action={} action.index={}
                        action.index._index = "nyx_infra_disk-" + helper.printDate(curtime,'yyyy.MM')
                        action.index._type  = "_doc"
                        result+=JSON.stringify(action)+"\r\n"
                        doc[i]['@timestamp'] = curtime.getMillis()
                        result+=JSON.stringify(doc[i])+"\r\n"

                    }
                    result
                </javaScript>
            </setBody>
            <setHeader headerName="indice">
                <constant>nyx_infra_disk</constant>
            </setHeader>
            <to uri="direct:insertinelk"/>
        </route>

        <!-- Convert ActiveMQ lifesign to Nyx life sign -->
        <route>
            <from uri="jms:topic:RPN_AMQ_MONITORING"/>
            <convertBodyTo type="java.lang.String"/>
            <setBody>
                <javaScript>
                var amqmes=JSON.parse(request.body)
                var rpninfo={"error": "OK", "type": "lifesign", "module": "ActiveMQ"
                    , "version": amqmes["value"]["BrokerVersion"]
                    , "alive": 1, "eventtype": "lifesign","temppercentusage":amqmes["value"]["TempPercentUsage"]
                  , "totalconnectionscount":amqmes["value"]["TotalConnectionsCount"]
                  , "memorypercentusage":amqmes["value"]["StorePercentUsage"]
                  ,"storepercentusage":amqmes["value"]["MemoryPercentUsage"]
                  ,"currentconnectionscount":amqmes["value"]["CurrentConnectionsCount"]
                  } res=JSON.stringify(rpninfo)
                  res
                </javaScript>
            </setBody>
            <to uri="jms:topic:NYX_MODULE_INFO"/>
        </route>

        <!-- Store life signs into Elastic -->
        <route>
            <from uri="jms:queue:NYX_LOG"/>
            <setHeader headerName="indice">
                <constant>nyx_log</constant>
            </setHeader>
            <to uri="direct:GENERIC_INSERT"/>
        </route>

        <!-- Store life signs into Elastic -->
        <route>
            <from uri="jms:topic:NYX_MODULE_INFO"/>
            <setHeader headerName="indice">
                <constant>nyx_module_info</constant>
            </setHeader>
            <to uri="direct:GENERIC_INSERT"/>
        </route>

        <route id="TreatmentModuleInfo">
            <from uri="direct:GENERIC_INSERT"/>
            <to uri="bean:jsHelper"/>
            <convertBodyTo type="java.lang.String"/>

            <setBody>
                <javaScript>
                    <![CDATA[
                    var obj = JSON.parse(''+request.body);
                    var helper = request.headers.get('jsHelper');
                    var curtime = new org.joda.time.DateTime();	

                    obj['@timestamp'] = curtime.getMillis()

                    obj = JSON.stringify(obj);
                    obj
                ]]>
                </javaScript>
            </setBody>


            <aggregate strategyRef="arrayListAggregationStrategy" completionInterval="10000">
                <correlationExpression>
                    <simple>${in.headers.indice}</simple>
                </correlationExpression>
                <completionSize>
                    <constant>100</constant>
                </completionSize>
                <log message="Bulk ready."/>
                <!--log message="${body}"/-->

                <setBody>
                    <javaScript>
                        <![CDATA[
                        var tab = JSON.parse(''+request.body);
                        var helper = request.headers.get('jsHelper');
                        var curtime = new org.joda.time.DateTime();	
                        var res = "";

                        for(var i in tab)
                        {
                            var obj = {}

                            if(res!='')
                                res = res+'\n'
                            obj.index = {}
                            obj.index._index = request.headers.get('indice')+"-" + helper.printDate(curtime,'yyyy.MM.dd')
                            obj.index._type  = "_doc"
                            res = res + JSON.stringify(obj) + '\n' + JSON.stringify(tab[i])
                        }
                        res = res+'\n'
                        res;
                    ]]>
                    </javaScript>
                </setBody>
                <!--multicast-->
                <to uri="direct:insertinelk"/>
                <!--/multicast-->
            </aggregate>
        </route>

        <route id="InsertInELK">
            <from uri="direct:insertinelk"/>
            <doTry>
                <removeHeaders pattern="*" excludePattern="indice|CamelAggregatedSize"/>
                <setHeader headerName="Content-Type">
                    <constant>application/json</constant>
                </setHeader>
                <to uri="http4://esnodebal:9200/_bulk"/>

                <log loggingLevel="INFO" message="Insert done in ELK : (http4://esnodebal:9200/_bulk) indice:(${in.headers.indice}) number:(${in.headers.CamelAggregatedSize})" />
                <!--convertBodyTo type="java.lang.String"/-->
                <to uri="bean:jsHelper"/>
                <convertBodyTo type="java.lang.String"/>
                <setBody>
                    <javaScript>
                        var helper = request.headers.get('jsHelper');
                        //helper.info("BODY=="+request.body+"==");
                        var res=JSON.parse(request.body);
                            request.headers.put("ERRORS",res.errors);
                        request.body;
                    </javaScript>
                </setBody>
                <filter>
                    <simple>${header.ERRORS}</simple>
                    <log loggingLevel="ERROR" message="Insertion in ELK generated errors ${body}"/>
                </filter>

                <doCatch>
                    <exception>java.lang.Exception</exception>
                    <log loggingLevel="ERROR" message="Unable to insert in ELK : (http4://esnodebal:9200/_bulk) indice:(nyx_module_info) number:(${in.headers.CamelAggregatedSize}) Exception:${exception.message} Trace:${exception.stacktrace}" />
                    <log loggingLevel="ERROR" message="bulk:${body}" />
                </doCatch>
            </doTry>
        </route>

       <!--route>
           <from uri="timer://foo?period=10000"/>
           <setBody>
               <simple>
                   select count(*) from nyx.public.weather
               </simple> 
           </setBody>
           <to uri="jdbc:pgds"/>
           <to uri="log:POSTGRES"/>
          
        </route-->
     



    </camelContext>
    <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
        <property name="connectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <property name="brokerURL" value="tcp://amqc:61616"/>
                <property name="userName" value="admin"/>
                <property name="password" value="nyxamqpassword"/>
            </bean>
        </property>
    </bean>

    <bean id="pgds" class="org.apache.commons.dbcp.BasicDataSource"
        destroy-method="close">
        <property name="driverClassName" value="org.postgresql.Driver" />
        <property name="url" value="jdbc:postgresql://postgres:5432/nyx" />
        <property name="username" value="nyx" />
        <property name="password" value="postgrespass" />
        <property name="timeBetweenEvictionRunsMillis" value="300000" />
        <property name="numTestsPerEvictionRun" value="6" />
        <property name="minEvictableIdleTimeMillis" value="1800000" />
        <property name="initialSize" value="3" />
        <property name="maxActive" value="10" />
        <property name="maxIdle" value="10" />
        <property name="maxWait" value="5000" />
        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="100" />
    </bean>    
    
    
    
    
	<bean id="jsHelper" class="helper.JSHelper">
		<!--<property name="PubSub" ref="pubsub"/>-->
	</bean>



    <bean id="jsHelper" class="helper.JSHelper">
        <!--<property name="PubSub" ref="pubsub"/>-->
    </bean>


    <bean id="arrayListAggregationStrategy" class="helper.ArrayListAggregationStrategy"/>
</beans>

