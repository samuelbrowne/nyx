
##############################################################################################
# UPGARDE TO HTTPS
##############################################################################################

server {
 listen 80 default_server;
 listen [::]:80 default_server;
 server_name app.nyx-ds.ovh;
 return 301 https://nyx.cofelygtc.com$request_uri;
# return 200 'BP0EAVJClytQs6eP1brLw4_Sf2o5czvgH6MZz-Kt9oQ.o-9CG1-trva3QV_oIXRC4dIzrZ8-iVPC8xDBSS6qZf4';
}

    map $http_upgrade $connection_upgrade {
        default upgrade;
        '' close;
    }

upstream amqcwebsocket {
        server amqc:61614;
    }

upstream kibanawebsocket {
        server kibana:5601;
    }

upstream anacondawebsocket {
        server anacondab:8888;
    }

server {
    listen 61619;


    ssl_certificate /etc/certs/nyx.crt;
    ssl_certificate_key /etc/certs/nyx.key;
    ssl on;
    ssl_session_cache builtin:1000 shared:SSL:10m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
    ssl_prefer_server_ciphers on;

    location / {

	    proxy_pass http://amqcwebsocket;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
    }
}

##############################################################################################
# ESNODEBAL
##############################################################################################

server {
    listen 9200;


    ssl_certificate /etc/certs/nyx.crt;
    ssl_certificate_key /etc/certs/nyx.key;
    ssl on;
    ssl_session_cache builtin:1000 shared:SSL:10m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
    ssl_prefer_server_ciphers on;

    location / {


	    proxy_set_header           X-Real-IP   $remote_addr;
            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header           X-Forwarded-Proto  $scheme;
            proxy_set_header           X-Forwarded-Server  $host;
            proxy_set_header           X-Forwarded-Host  $host;
            proxy_set_header           Host  $host;

 	    proxy_hide_header 'Access-Control-Allow-Origin';

        
            if ($request_method = 'OPTIONS' ) {
                # if request method is options we immediately return with 200 OK.
                return 200;
            }


      auth_basic "Restricted"; #For Basic Auth 
      auth_basic_user_file /etc/nginx/conf.d/.htpasswd; #For Basic Auth
      proxy_pass http://esnodebal:9200;
      proxy_redirect off;
    }
}

##############################################################################################
# rpnui
##############################################################################################

server {
    listen 444;

#error_page  405     =200 $uri;

    access_log /var/log/nginx/nginx_access.log;
    error_log /var/log/nginx/nginx_error.log notice;

    rewrite_log on;
    
    client_max_body_size 100M;
    gzip on;
    gzip_vary on;
    gzip_min_length 50000;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/json;
    gzip_disable "MSIE [1-6]\.";

    ssl_certificate /etc/certs/nyx.crt;
    ssl_certificate_key /etc/certs/nyx.key;

    ssl on;
    ssl_session_cache builtin:1000 shared:SSL:10m;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
    ssl_prefer_server_ciphers on;

    server_tokens off;



#========= REPORTS

    location /generatedreports/  {
       root /www;
    }


#========== LOGS
    location   ~* /(logs|socket\.io)/ {
          rewrite ^/logs/(.*) /$1 break;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $host;

          resolver 127.0.0.11;
            access_by_lua_block{
            
              local redis = require "resty.redis"
              local red = redis:new()
              red:set_timeout(1000) -- 1 sec
              
              local ok, err = red:connect("redis", 6379)
              if not ok then
                 ngx.exit(ngx.HTTP_FORBIDDEN)
                 return
              end
              
              tok=ngx.var.cookie_nyx_logs
              if not tok then
                 ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
                 return
              end
              
              rediskey="nyx_logs_"..tok
              local res, err = red:get(rediskey)
              if not res then
                 ngx.exit(ngxi.HTTP_CONFLICT)
                 return
              end
              
              if res == ngx.null then
                 ngx.exit(ngx.HTTP_NOT_ALLOWED)
                 return
              end
              
           }

          proxy_pass http://logioweb:28778;

#          auth_basic "Restricted"; #For Basic Auth
#          auth_basic_user_file /etc/nginx/conf.d/.htpasswd; #For Basic Auth

          # Socket.IO Support
          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";
     }

#========== AKIBANA 
    location   ~* /kibana(\/socket\.io)/ {
          rewrite ^/kibana/(.*)/ /$1/ break;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header Host $host;


#return 403;
            proxy_pass http://kibanawebsocket;
#            proxy_http_version 1.1;
#            proxy_set_header Upgrade $http_upgrade;
#            proxy_set_header Connection $connection_upgrade;
#            proxy_redirect off;
     }

#========= TEMP

    location /temp/ {
       root /www/tempfiles/;
       rewrite /temp/(.*) /$1 break; 
#       root /home/rpinum/website/tempfile;
    }

    location /public/ {
       root /www/public_www/;
       rewrite /public/(.*) /$1 break;
#       root /home/rpinum/website/tempfile;
    }


#========= PORTAINER

    location /portainer/ {

      auth_basic "Restricted"; #For Basic Auth
      auth_basic_user_file /etc/nginx/conf.d/.htpasswd; #For Basic Auth
      proxy_pass http://portainer:9000/;
      proxy_redirect off;
   }

#========= CEREBRO

    location /cerebro/ {
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-NginX-Proxy true;
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            resolver 127.0.0.11;
            access_by_lua_block{

              local redis = require "resty.redis"
              local red = redis:new()
              red:set_timeout(1000) -- 1 sec

              local ok, err = red:connect("redis", 6379)
              if not ok then
                 ngx.exit(ngx.HTTP_FORBIDDEN)
                 return
              end

              tok=ngx.var.cookie_nyx_cerebro
              if not tok then
                 ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
                 return
              end

              rediskey="nyx_cerebro_"..tok
              local res, err = red:get(rediskey)
              if not res then
                 ngx.exit(ngxi.HTTP_CONFLICT)
                 return
              end

              if res == ngx.null then
                 ngx.exit(ngx.HTTP_NOT_ALLOWED)
                 return
              end

           }
          proxy_pass http://cerebro:9000/;
          proxy_redirect off;

          limit_except PUT GET POST HEAD OPTIONS {
          deny all;
        }
    }


#========= NODE RED

    location ^~ /nodered/ui/socket.io/
    { 
            proxy_set_header           X-Real-IP   $remote_addr;
            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header           X-Forwarded-Proto  $scheme;
            proxy_set_header           X-Forwarded-Server  $host;
            proxy_set_header           X-Forwarded-Host  $host;
            proxy_set_header           Host  $host;

            proxy_hide_header 'Access-Control-Allow-Origin';


            if ($request_method = 'OPTIONS' ) {
                # if request method is options we immediately return with 200 OK.
                return 200;
            }

          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";

          auth_basic "Restricted"; #For Basic Auth 
          auth_basic_user_file /etc/nginx/conf.d/.htpasswd; #For Basic Auth
          proxy_pass http://nodered:1880;
          proxy_redirect off;
    }

    location   /nodered/ {
            proxy_set_header           X-Real-IP   $remote_addr;
            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header           X-Forwarded-Proto  $scheme;
            proxy_set_header           X-Forwarded-Server  $host;
            proxy_set_header           X-Forwarded-Host  $host;
            proxy_set_header           Host  $host;

            proxy_hide_header 'Access-Control-Allow-Origin';

            if ($request_method = 'OPTIONS' ) {
                # if request method is options we immediately return with 200 OK.
                return 200;
            }

          proxy_http_version 1.1;
          proxy_set_header Upgrade $http_upgrade;
          proxy_set_header Connection "upgrade";

#          auth_basic "Restricted"; #For Basic Auth 
#          auth_basic_user_file /etc/nginx/conf.d/.htpasswd; #For Basic Auth
           resolver 127.0.0.11;
           access_by_lua_block{

              local redis = require "resty.redis"
              local red = redis:new()
              red:set_timeout(1000) -- 1 sec

              local ok, err = red:connect("redis", 6379)
              if not ok then
                 ngx.exit(ngx.HTTP_FORBIDDEN)
                 return
              end

              tok=ngx.var.cookie_nyx_kibananyx
              if not tok then
                 ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
                 return
              end

              rediskey="nyx_nodered_"..tok
              local res, err = red:get(rediskey)
              if not res then
                 ngx.exit(ngxi.HTTP_CONFLICT)
                 return
              end

              if res == ngx.null then
                 ngx.exit(ngx.HTTP_NOT_ALLOWED)
                 return
              end

           }

          proxy_pass http://nodered:1880;
          proxy_redirect off;
    }

#========== AMQC

    location /amqc/ {
            proxy_set_header           X-Real-IP   $remote_addr;
            proxy_set_header           X-Forwarded-For  $proxy_add_x_forwarded_for;
            proxy_set_header           X-Forwarded-Proto  $scheme;
            proxy_set_header           X-Forwarded-Server  $host;
            proxy_set_header           X-Forwarded-Host  $host;
            proxy_set_header           Host  $host;
#       rewrite /amqc/(.*) /$1 break;
       proxy_pass http://amqc:8161/;
       proxy_redirect off;    
}


#========= KIBANA

    location /kibana/ {

#       auth_basic "Restricted"; #For Basic Auth
#       auth_basic_user_file /etc/nginx/conf.d/.htpasswd; #For Basic Auth
            resolver 127.0.0.11;
            access_by_lua_block{
              
              local redis = require "resty.redis"
              local red = redis:new()
              red:set_timeout(1000) -- 1 sec
                 
              local ok, err = red:connect("redis", 6379)
              if not ok then
                 ngx.exit(ngx.HTTP_FORBIDDEN)
                 return
              end
                 
              tok=ngx.var.cookie_nyx_kibana
              if not tok then
                 ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
                 return
              end
                 
              rediskey="nyx_kibana_"..tok
              local res, err = red:get(rediskey)
              if not res then
                 ngx.exit(ngxi.HTTP_CONFLICT)
                 return
              end
              
              if res == ngx.null then
                 ngx.exit(ngx.HTTP_NOT_ALLOWED)
                 return
              end
              
           }  
       proxy_pass http://kibana:5601/;
       proxy_redirect off;
    }



#========= KIBANA RPN

    location /kibananyx/ {
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-NginX-Proxy true;
            proxy_http_version 1.1;
            proxy_set_header Connection "";

	    resolver 127.0.0.11;
            access_by_lua_block{
              url = ngx.var.request_uri


              if string.match(url, "api/console/proxy") then
                ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
                return
              end


              if string.match(url, "api/index_management/") then
                ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
                return
              end

              if string.match(url, "saved_objects/index-pattern") then
                ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
                return
              end

              if string.match(url, "api/spaces") then
                ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
                return
              end


              local redis = require "resty.redis"
              local red = redis:new()
              red:set_timeout(1000) -- 1 sec

              local ok, err = red:connect("redis", 6379)
              if not ok then
                 ngx.exit(ngx.HTTP_FORBIDDEN)
                 return
              end
           
    	      tok=ngx.var.cookie_nyx_kibananyx
	      if not tok then
                 ngx.exit(ngx.HTTP_NOT_ACCEPTABLE)
                 return
              end

              rediskey="nyx_tok_"..tok
              local res, err = red:get(rediskey)
              if not res then
                 ngx.exit(ngxi.HTTP_CONFLICT)
                 return
              end

	      if res == ngx.null then
                 ngx.exit(ngx.HTTP_NOT_ALLOWED)
                 return
              end

              if string.match( ngx.var.request_uri,"_msearch") then 
		 ngx.req.read_body()
                 red:set("nyx_kib_msearch"..tok,ngx.var.request_body)
              end 
	   }
	  proxy_pass http://kibananyx:5601/;
          proxy_redirect off;

          limit_except PUT GET POST HEAD OPTIONS {
          deny all;
        }
    }

#========= REST API
    location /api/ {

      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-NginX-Proxy true;

      proxy_http_version 1.1;
      proxy_set_header Connection "";

      proxy_pass http://nyx_restapi:8000;
      proxy_redirect off;
    }

    location /swaggerui/ {

      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-NginX-Proxy true;

      proxy_http_version 1.1;
      proxy_set_header Connection "";

      proxy_pass http://nyx_restapi:8000;
      proxy_redirect off;
    }

    location /swagger.json {

      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-NginX-Proxy true;

      proxy_http_version 1.1;
      proxy_set_header Connection "";

      proxy_pass http://nyx_restapi:8000;
      proxy_redirect off;
    }

#========= REST API
    location /cofapi/ {
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-NginX-Proxy true;

      proxy_http_version 1.1;
      proxy_set_header Connection "";

      rewrite ^/cofapi/(.*) api/$1 break;
      proxy_pass http://cof_restapi:5000;
      proxy_redirect off;
    }

#========= MOBILE WEB SITE
    location /mobile/ {

      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-NginX-Proxy true;

      proxy_http_version 1.1;
      proxy_set_header Connection "";

      rewrite ^/mobile/(.*) /$1 break;

      proxy_pass http://nyx_mobile:7654;
      proxy_redirect off;
    }

#========= WEB SITE
    location / {

      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-NginX-Proxy true;

      proxy_http_version 1.1;
      proxy_set_header Connection "";

      proxy_pass http://nyx_ui:7654;
      proxy_redirect off;
    }
}


server {
    listen 8080;

     location /public/ {
       root /www/public_www/;
       rewrite /public/(.*) /$1 break;
    }
}
